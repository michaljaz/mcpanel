// Generated by CoffeeScript 2.5.1
(function() {
  var Rcon, app, bodyParser, config, dirToJson, express, filesize, fs, genDirTree, loadIniFile, ms, opn, properties, rcon, runCommand, server_status, uuidv4;

  express = require("express");

  app = express();

  fs = require("fs");

  opn = require("opn");

  loadIniFile = require("read-ini-file");

  Rcon = require("modern-rcon");

  dirToJson = require("dir-to-json");

  uuidv4 = require('uuid').v4;

  filesize = require("filesize");

  ms = require("./minestat.js");

  bodyParser = require("body-parser");

  app.set('view engine', 'ejs');

  app.set('views', `${__dirname}/views`);

  app.use(express.static(`${__dirname}/public`));

  app.use(function(req, res, next) {
    res.set('Cache-Control', 'no-store');
    next();
  });

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  config = JSON.parse(fs.readFileSync(`${__dirname}/config.json`, 'utf8'));

  properties = loadIniFile.sync(`${config.server.path}server.properties`);

  console.log(properties["rcon.password"]);

  rcon = new Rcon(config.server.host, properties["rcon.password"]);

  genDirTree = function(path, callback) {
    var dirTree;
    dirTree = {};
    fs.readdir(path, function(err, files) {
      var len;
      len = 0;
      files.forEach(function(file) {
        var filePath, isFile;
        filePath = path + file;
        isFile = fs.statSync(filePath).isFile();
        if (isFile === false) {
          len++;
        }
      });
      files.forEach(function(file) {
        var data, filePath, isFile, stat;
        filePath = path + file;
        stat = fs.statSync(filePath);
        isFile = stat.isFile();
        if (isFile) {
          data = fs.readFileSync(filePath, 'utf8');
          dirTree[file] = {
            isFile: true,
            perms: (stat.mode & 0o777).toString(8),
            size: filesize(stat.size),
            data,
            __uuid: uuidv4()
          };
        } else {
          genDirTree(`${filePath}/`, function(dirTreex) {
            dirTree[file] = dirTreex;
            dirTree[file].__uuid = uuidv4();
            dirTree[file].__perms = stat.mode & 0o777;
            len--;
            if (len === 0) {
              callback(dirTree);
            }
          });
        }
      });
      if (len === 0) {
        callback(dirTree);
      }
    });
  };

  runCommand = function(frase, callback) {
    rcon.connect().then(function() {
      return rcon.send(frase);
    }).then(function(res) {
      return callback(res);
    }).then(function() {
      return rcon.disconnect();
    });
  };

  server_status = function(callback) {
    ms.init(config.server.host, config.server.port, function(result) {
      callback(ms);
    });
  };

  app.all("/", function(req, res) {
    var auth, buf, creds, password, plain_auth, tmp, username;
    auth = req.headers['authorization'];
    if (!auth) {
      res.setHeader("WWW-Authenticate", "Basic realm='Secure Area'");
      res.statusCode = 401;
      res.end("<html><body>Need some creds son</body></html>");
    } else if (auth) {
      tmp = auth.split(" ");
      buf = new Buffer(tmp[1], "base64");
      plain_auth = buf.toString();
      creds = plain_auth.split(":");
      username = creds[0];
      password = creds[1];
      if ((username === config.panel.login) && (password === config.panel.password)) {
        res.statusCode = 200;
        genDirTree(config.server.path, function(dirTree) {
          res.render('index', {
            query: req.query,
            config,
            properties,
            dirTree
          });
        });
      } else {
        res.statusCode = 401;
        res.setHeader("WWW-Authenticate", "Basic realm='Secure Area'");
        res.statusCode = 403;
        res.end("Forbidden");
      }
    }
  });

  app.all("/api/status/", function(req, res) {
    server_status(function(resp) {
      res.json(resp);
    });
  });

  app.all("/rcon/server/", function(req, res) {
    runCommand(req.query.cmd, function(resp) {
      res.send(resp);
    });
  });

  app.all("/api/getlogs/", function(req, res) {
    res.send(fs.readFileSync(`${config.server.path}logs/latest.log`, "utf8"));
  });

  app.all("/api/get_live_info/", function(req, res) {
    res.json({
      bans: JSON.parse(fs.readFileSync(`${config.server.path}banned-players.json`, "utf8")),
      ops: JSON.parse(fs.readFileSync(`${config.server.path}ops.json`, "utf8")),
      banip: JSON.parse(fs.readFileSync(`${config.server.path}banned-ips.json`, "utf8")),
      wl: JSON.parse(fs.readFileSync(`${config.server.path}whitelist.json`, "utf8"))
    });
  });

  app.all("/api/savefile/", function(req, res) {
    var filePath;
    filePath = `${config.server.path}${req.body.plugin}`;
    console.log(filePath);
    fs.writeFile(filePath, req.body.code, function(err) {
      if (err) {
        throw err;
      }
      console.log("file saved!");
    });
    res.send("OK");
  });

  app.all("/api/new_/", function(req, res) {
    var filePath;
    if (req.body.type === "file") {
      filePath = `${config.server.path}${req.body.loc}`;
      fs.appendFile(filePath, '', function(err) {
        if (err) {
          throw err;
        }
        console.log('Created new file!');
      });
      return;
    } else if (req.body.type === "folder") {
      fs.mkdir(`${config.server.path}${req.body.loc}`, function(err) {
        if (err) {
          console.log(err);
        } else {
          console.log("New directory successfully created.");
        }
      });
    }
    res.send("OK");
  });

  app.all("/api/delfiles/", function(req, res) {
    var filePath, p;
    for (p in req.body.files) {
      if (req.body.files[p]) {
        filePath = `${config.server.path}${req.body.path}${p}`;
        if (p[p.length - 1] === "/") {
          fs.rmdirSync(filePath, {
            recursive: true
          });
        } else {
          fs.unlink(filePath, function(err) {
            if (err) {
              throw err;
            }
            console.log("File deleted!");
          });
        }
      }
    }
    res.send("OK");
  });

  app.all("/api/chname/", function(req, res) {
    var fr, to;
    console.log(req.body);
    fr = `${config.server.path}${req.body.path}${req.body.from}`;
    to = `${config.server.path}${req.body.path}${req.body.to}`;
    fs.rename(fr, to, function(err) {
      if (err) {
        console.log(`ERROR: ${err}`);
      }
    });
    console.log(fr);
    res.send("OK");
  });

  app.listen(config.panel.port, function() {
    var url;
    url = `http://localhost:${config.panel.port}/`;
    console.log(`Server is running on ${url}`);
    opn(url);
  });

}).call(this);
